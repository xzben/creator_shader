// Effect Syntax Guide: https://github.com/cocos-creator/docs-3d/blob/master/zh/material-system/effect-syntax.md

CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: general-vs:vert # builtin header
      frag: unlit-fs:frag
      properties: &props
        mainTexture:    { value: white }
        envTexture:     { value: white }
        noiseTexture:   { value: white }
        mainColor:      { value: [1, 1, 1, 1], editor: { type: color } }
        rimColor:       { value: [1, 1, 1, 1], editor: { type: color } }
        floatColor:     { value: [1, 1, 1, 1], editor: { type: color } } 
        center:         { value: [0.5, 0.5] }
        range:          { value: [0, 0.27] }
        envMix:         { value: 0.3 }
  - name: transparent
    passes:
    - vert: general-vs:vert # builtin header
      frag: unlit-fs:frag
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
}%

CCProgram unlit-vs %{  
  precision highp float;
  #include <input-standard>
  #include <cc-global>
  #include <cc-local-batch>
  #include <input-standard>
  #include <cc-fog-vs>
  #include <cc-shadow-map-vs>

  in vec4 a_color;
  #if HAS_SECOND_UV
    in vec2 a_texCoord1;
  #endif

  out vec3 v_position;
  out vec3 v_normal;
  out vec3 v_tangent;
  out vec3 v_bitangent;
  out vec2 v_uv;
  out vec2 v_uv1;
  out vec4 v_color;

  vec4 vert () {
    StandardVertInput In;
    CCVertInput(In);

    mat4 matWorld, matWorldIT;
    CCGetWorldMatrixFull(matWorld, matWorldIT);

    vec4 pos = matWorld * In.position;

    v_position = pos.xyz;
    v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);
    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);
    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w; // note the cross order



    v_uv = a_texCoord;
    #if HAS_SECOND_UV
      v_uv1 = a_texCoord1;
    #endif
    v_color = a_color;

    CC_TRANSFER_FOG(pos);
    CC_TRANSFER_SHADOW(pos);

    return cc_matProj * (cc_matView * matWorld) * In.position;
  }
}%
CCProgram unlit-fs %{
  precision highp float;
  #include <output>
  #include <cc-fog-fs>

  in vec2 v_uv;
  in vec3 v_position;
  in vec3 v_normal;

  uniform sampler2D mainTexture;
  uniform samplerCube envTexture;
  uniform sampler2D noiseTexture;
  
  uniform Constant {
    vec4 mainColor;
    vec4 rimColor;
    vec4 floatColor;
    vec2 center;
    vec2 range;
    float envMix;
  };

  vec4 frag () {
    vec3 v_view = cc_cameraPos.xyz - v_position.xyz;
    vec3 n = normalize(v_normal);
    vec3 v = normalize(v_view);
    vec3 l = normalize(cc_mainLitDir.xyz);

    vec4 col = texture(mainTexture, v_uv);

    vec2 uv = v_position.xz *0.1 + cc_time.x *0.05;
    float t = texture(noiseTexture, uv.xy).r;
    vec3 r = -v + t*0.03;
    vec2 tuv = v_uv + t*0.03;

    vec3 reflectColor = mix(texture(mainTexture, tuv).rgb, texture(envTexture, r).rgb, envMix);

    //菲涅尔反射
    float fresnel = mix(0.15, 1.0, pow(1.0 - dot(n,l), 1.0));
    vec3 color = reflectColor;

    color = mix(cc_mainLitColor.xyz, color, fresnel);

    //浮沫
    color = mix(color, floatColor.rgb, smoothstep(0.9, 0.91, t));
    //边界颜色融合
    vec2 d = v_uv - center;
    color = mix(color, rimColor.rgb, rimColor.a * smoothstep(range.x, range.y, dot(d,d)));

    return vec4(color, mainColor.a);
  }
}%
