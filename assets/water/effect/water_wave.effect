// Effect Syntax Guide: https://github.com/cocos-creator/docs-3d/blob/master/zh/material-system/effect-syntax.md
// 水波
CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: unlit-vs:vert # builtin header
      frag: unlit-fs:frag
      properties: &props
        mainTexture:    { value: white }
        mainColor:      { value: [1, 1, 1, 1], editor: { type: color } }
        tilingOffset: { value: [1, 1, 0, 0] }
        iOffset:      { value: [0.2, 0.2], inspector: { displayName : "偏移值" } }
  - name: transparent
    passes:
    - vert: unlit-vs:vert # builtin header
      frag: unlit-fs:frag
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
}%


CCProgram unlit-vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local-batch>
  #include <input>
  
  #if USE_VERTEX_COLOR
    in vec4 a_color;
    out vec4 v_color;

  #endif

  #if USE_TEXTURE
    out vec2 v_uv;
    uniform TexCoords {
      vec4 tilingOffset;
    };
  #endif
  
  vec4 vert () {
    vec4  position;
    CCVertInput(position);

    highp mat4 matWorld;
    CCGetWorldMatrix(matWorld);
    
    highp vec4 pos = cc_matProj * (cc_matView * matWorld) * position;

    #if USE_TEXTURE
      v_uv = a_texCoord;
      #if FLIP_UV
        v_uv.y = 1.0 - v_uv.y;
      #endif
      v_uv = v_uv * tilingOffset.xy + tilingOffset.zw;
    #endif

    #if USE_VERTEX_COLOR
      v_color = a_color;
    #endif

    return pos;
  }
}%

CCProgram unlit-fs %{
  precision mediump float;
  #include <output>

  #if USE_TEXTURE
    in vec2 v_uv;
    uniform sampler2D mainTexture;
    uniform Tex {
      vec2 iOffset;
    };
  #endif

  #if USE_COLOR
    uniform Constant {
      vec4 mainColor;
    };
  #endif

  #if USE_VERTEX_COLOR
    in vec4 v_color;
  #endif

  vec4 water_wave(){
    vec2 uv = v_uv;
    float time = mod(cc_time.x, 360.) * 3.;
    uv.x += (sin(uv.y * 30.0 + time) / 30.0 * iOffset[0]);
    uv.y += (sin(uv.x * 30.0 + time) / 30.0 * iOffset[1]);
    return texture(mainTexture, uv);
  }

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      o *= water_wave();
    #endif

    #if USE_COLOR
      o *= mainColor;
    #endif

    #if USE_VERTEX_COLOR
      o *= v_color;
    #endif

    return CCFragOutput(o);
  }
}%
